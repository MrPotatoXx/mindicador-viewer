---
import Layout from '../components/Layout.astro'; // Se importa el componente Layout para estructurar la página
import { getIndicador } from '../utils/api.js'; // Se importa la función para obtener los datos del indicador desde la API
import { formatValor } from '../utils/format.js'; // Se importa la función para formatear el valor de los indicadores

// Definición de la interfaz para cada elemento de la serie
interface SerieItem {
  fecha: string; // Representa la fecha del dato en formato ISO string
  valor: number; // Representa el valor numérico del indicador
}

// Se extrae el parámetro 'indicador' de la URL
const { indicador } = Astro.params;

let data = null; // Variable para almacenar los datos del indicador
let valores: SerieItem[] = []; // Arreglo para almacenar la serie de valores del indicador
let hasError = false; // Bandera para indicar si existe algún error al obtener los datos

try {
  // Se intenta obtener los datos correspondientes al indicador
  data = await getIndicador(indicador);

  if (!data?.serie?.length) {
    // Si no existen datos en 'serie', se activa la bandera de error
    hasError = true;
  } else {
    // Se extraen los primeros 30 registros y se invierte el orden para una mejor visualización cronológica
    valores = data.serie.slice(0, 30).reverse();
  }
} catch (err) {
  // Captura y manejo de cualquier error que ocurra durante la solicitud
  const error = err as Error;
  console.error("Error al obtener el indicador:", error.message);
  hasError = true;
}
---

<Layout title={`Indicador: ${data?.nombre || 'No encontrado'}`}>
  {
    hasError ? (
      <section class="text-center py-16">
        <h1 class="text-2xl font-bold text-red-600">Indicador no encontrado</h1>
        <p class="text-gray-600 mt-2">
          El indicador <code>{indicador}</code> no existe o no pudo cargarse.
          <br />
          <a href="/" class="text-blue-500 underline">Volver al inicio</a>
        </p>
      </section>
    ) : (
      <>
        <section class="mb-8">
          <h1 class="text-3xl font-bold mb-2 text-blue-700">{data.nombre}</h1>
          <p class="text-lg text-gray-700">
            Valor actual:
            <strong class="text-blue-600">{formatValor(data.serie[0].valor, data.unidad_medida)}</strong>
          </p>
          <p class="text-sm text-gray-500">Unidad: {data.unidad_medida}</p>
        </section>

        <section>
          <h2 class="text-2xl font-semibold mb-4 text-gray-800">Últimos 30 valores</h2>
          <div class="overflow-x-auto">
            <table class="min-w-full bg-white rounded shadow border border-gray-200">
              <thead class="bg-blue-100 text-blue-700">
                <tr>
                  <th class="text-left py-2 px-4 border-b">Fecha</th>
                  <th class="text-left py-2 px-4 border-b">Valor</th>
                </tr>
              </thead>
              <tbody>
                {
                  valores.map((item) => (
                    <tr class="hover:bg-blue-50 transition">
                      <td class="py-2 px-4 border-b">{item.fecha.split('T')[0]}</td>
                      <td class="py-2 px-4 border-b">{formatValor(item.valor, data.unidad_medida)}</td>
                    </tr>
                  ))
                }
              </tbody>
            </table>
          </div>
        </section>
      </>
    )
  }
</Layout>
